generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id          Int     @id @default(autoincrement())
  line1       String
  line2       String?
  city        String
  state       String
  country     String
  first_name  String
  is_primary_ Boolean
  last_name   String
  postal_code String
  user_email  String
  user        user    @relation(fields: [user_email], references: [email], map: "Address_user_email_fkey")

  @@index([user_email], map: "Address_user_email_fkey")
}

model cart {
  id         Int       @id @default(autoincrement())
  quantity   Int
  user_email String   @unique
  user       user      @relation(fields: [user_email], references: [email], map: "Cart_user_email_fkey")
  product    product[] @relation("carttoproduct")

  @@index([user_email], map: "Cart_user_email_fkey")
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  product     product[]
}

model files {
  id             Int        @id @default(autoincrement())
  file_url       String
  file_name      String
  help_center_id Int
  helpcenter     helpcenter @relation(fields: [help_center_id], references: [phone], map: "Files_help_center_id_fkey")

  @@index([help_center_id], map: "Files_help_center_id_fkey")
}

model group {
  description                  String?          @db.VarChar(1000)
  duration                     Int?             @default(0)
  final_discount               Float?
  group_code                   String           @id
  group_img                    String?          @db.VarChar(100)
  group_name                   String
  is_active_                   Boolean?         @default(true)
  owner_email                  String
  start_date                   DateTime         @default(now())
  tag_1                        String?          @db.VarChar(100)
  tag_2                        String?          @db.VarChar(100)
  user_group_owner_emailTouser user             @relation("group_owner_emailTouser", fields: [owner_email], references: [email], map: "Group_owner_email_fkey")
  groupcomission               groupcomission[]
  grouphostmember              groupmember?
  order                        order[]
  picture                      picture[]
  user_groupcohosts            user[]           @relation("groupcohosts")
  user_groupmembers            user[]           @relation("groupmembers")

  @@index([owner_email], map: "Group_owner_email_fkey")
}

model groupcomission {
  id                Int    @id @default(autoincrement())
  commission_amount Float
  user_email        String
  group_code        String
  group             group  @relation(fields: [group_code], references: [group_code], map: "GroupComission_group_code_fkey")
  user              user   @relation(fields: [user_email], references: [email], map: "GroupComission_user_email_fkey")

  @@index([group_code], map: "GroupComission_group_code_fkey")
  @@index([user_email], map: "GroupComission_user_email_fkey")
}

model groupmember { //many - many table
  group_id                                Int     @id @default(autoincrement())
  group_code                              String  @unique(map: "GroupHostMember_group_code_key")
  owner_email                             String? @unique(map: "GroupHostMember_owner_email_key")
  cohost_email                            String? @unique(map: "GroupHostMember_cohost_email_key")
  member_email                            String? @unique(map: "GroupHostMember_member_email_key")
  user_owner  user?   @relation("grouphostmember_owner_emailTouser", fields: [owner_email], references: [email], map: "GroupHostMember_owner_email_fkey")
  user_cohost user?   @relation("grouphostmember_cohost_emailTouser", fields: [cohost_email], references: [email], map: "GroupMember_cohost_email_fkey")
  user_member user?   @relation("grouphostmember_member_emailTouser", fields: [member_email], references: [email], map: "GroupMember_member_email_fkey")
  group                                   group   @relation(fields: [group_code], references: [group_code], map: "GroupHostMember_group_code_fkey")
}

model helpcenter {
  phone       Int     @id
  description String? @db.VarChar(45)
  user_email  String
  files       files[]
  user        user    @relation(fields: [user_email], references: [email], map: "HelpCenter_user_email_fkey")

  @@index([user_email], map: "HelpCenter_user_email_fkey")
}

model lovelistentry {
  id      Int    @id @default(autoincrement())
  user_id String @db.VarChar(255)
  sku_id  String

  @@unique([user_id, sku_id], map: "LoveListEntry_user_id_sku_id_key")
}

model order {
  total            Int?      @default(0)
  delivery         Float?    @db.Float
  refund_amount    Decimal?  @db.Decimal(10, 2)
  delivery_tip     Float?    @db.Float
  green_fee        Float?    @db.Float
  group_code       String
  id               Int       @id @default(autoincrement())
  order_date       DateTime? @default(now())
  payment_intent   String?   @db.VarChar(255)
  sales_tax        Float?    @db.Float
  shipping_address String?   @db.Text
  sub_total        Int?      @default(0)
  user_email       String
  group            group     @relation(fields: [group_code], references: [group_code], map: "Order_group_code_fkey")
  user             user      @relation(fields: [user_email], references: [email], map: "Order_user_email_fkey")
  product          product[] @relation("ordertoproduct")

  @@index([group_code], map: "Order_group_code_fkey")
  @@index([user_email], map: "Order_user_email_fkey")
}

model picture {
  id            Int      @id @default(autoincrement())
  url           String
  product_skuid String?
  group_id      String?
  group         group?   @relation(fields: [group_id], references: [group_code], map: "Picture_groupId_fkey")
  product       product? @relation(fields: [product_skuid], references: [skuid], map: "Picture_productSkuid_fkey")

  @@index([group_id], map: "Picture_groupId_fkey")
  @@index([product_skuid], map: "Picture_productSkuid_fkey")
}

model product {
  skuid                String    @id @default(cuid())
  description          String?
  alcohol              Boolean   @default(false)
  price                Int       @default(0)
  stock                Int       @default(0)
  alcohol_percentage   Int?      @default(0)
  category_id          Int?
  chinese_product_name String?
  cost_price           Int       @default(0)
  english_product_name String
  french_product_name  String?
  nutrition_fact       String?
  place_of_origin      String?
  product_weight       String
  retail_price         Int       @default(0)
  specification        String?
  image_url            String
  picture              picture[]
  category             category? @relation(fields: [category_id], references: [id], map: "Product_category_id_fkey")
  cart                 cart[]    @relation("carttoproduct")
  order                order[]   @relation("ordertoproduct")

  @@index([category_id], map: "Product_category_id_fkey")
}

model user {
  email                                              String           @id @unique(map: "User_email_key")
  password                                           String?
  phone                                              BigInt?
  birthday                                           DateTime?
  username                                           String?          @db.VarChar(100)
  first_name                                         String?
  last_name                                          String?
  profile_image                                      String?
  address                                            address[]
  cart                                               cart[]
  group_group_owner_emailTouser                      group[]          @relation("group_owner_emailTouser")
  groupcomission                                     groupcomission[]
  grouphostmember_grouphostmember_cohost_emailTouser groupmember? @relation("grouphostmember_cohost_emailTouser")
  grouphostmember_grouphostmember_member_emailTouser groupmember? @relation("grouphostmember_member_emailTouser")
  grouphostmember_grouphostmember_owner_emailTouser  groupmember? @relation("grouphostmember_owner_emailTouser")
  helpcenter                                         helpcenter[]
  order                                              order[]
  wallet                                             wallet?
  group_groupcohosts                                 group[]          @relation("groupcohosts")
  group_groupmembers                                 group[]          @relation("groupmembers")
}

model wallet {
  id         Int    @id @default(autoincrement())
  amount     Float? @default(0)
  user_email String @unique(map: "Wallet_user_email_key")
  user       user   @relation(fields: [user_email], references: [email], map: "Wallet_user_email_fkey")
}
