generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model account {
//   id                String  @id @default("0") @db.VarChar(50)
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              user    @relation(fields: [userId], references: [user_id], onDelete: Cascade, map: "Account_userId_fkey")

//   @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
//   @@index([userId], map: "Account_userId_fkey")
// }

model cart {
  cart_id    Int          @id @unique
  // productId String? @db.VarChar(100)
  // qty       String? @db.VarChar(100)
  cart_items cart_items[]
  user       user?
}

model cart_items {
  cart_items_id Int @id

  qty   String? @db.VarChar(100)
  price String  @db.VarChar(100)

  cart       cart    @relation(fields: [cart_id], references: [cart_id], map: "CartItems_cartId_fkey")
  cart_id    Int
  product    product @relation(fields: [product_id], references: [product_id], map: "Product_productId_fkey")
  product_id String
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  url         String?   @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
}

model group {
  group_id         Int      @id @unique @default(autoincrement())
  group_owner_id   String
  group_name       String
  description      String?  @db.VarChar(255)
  group_img        String?  @db.VarChar(100)
  group_code       String   @unique @default(uuid())
  group_link       String
  startDate        DateTime @default(now())
  endDate          DateTime
  is_active        Boolean  @default(false)
  final_discount   Float?
  owner_commission Float?   @default(0)

  group_member group_member[]
  group_owner  group_owner[]
  order        order[]
}

model group_member {
  group_member_id String @id @unique @default(uuid())
  user            user   @relation(fields: [user_id], references: [user_id], map: "GroupMember_userId_fkey")
  user_id         String @unique
  group           group  @relation(fields: [group_id], references: [group_id], map: "GroupMember_groupId_fkey")
  group_id        Int
}

model group_owner {
  group_owner_id  String   @id @unique @default(uuid())
  start_date      DateTime
  end_date        DateTime
  discount_amount Float

  user     user   @relation(fields: [user_id], references: [user_id], map: "GroupOwner_userId_fkey")
  user_id  String @unique
  group    group  @relation(fields: [group_id], references: [group_id], map: "GroupOwner_groupId_fkey")
  group_id Int
}

model help_center {
  phone       Int     @id
  email       String  @db.VarChar(45)
  description String? @db.VarChar(45)
  files       String? @db.VarChar(45)
}

model order {
  order_id        String       @id @unique @default(uuid())
  order_date      DateTime?    @default(now())
  subTotal        Int?         @default(0)
  total           Int?         @default(0)
  salesTax        Float?       @db.Float
  delivery        Float?       @db.Float
  greenFee        Float?       @db.Float
  tipDelivery     Float?       @db.Float
  is_delivery     Boolean?     @default(false)
  paymentIntent   String?
  shippingAddress String?      @db.Text
  refund_amount   Decimal?     @db.Decimal(10, 2)
  user            user         @relation(fields: [user_id], references: [user_id], map: "Order_userId_fkey")
  user_id         String
  group           group        @relation(fields: [group_id], references: [group_id], map: "Order_groupId_fkey")
  group_id        Int
  order_item      order_item[]
}

model order_item {
  order_item_id String  @id @unique @default(uuid())
  order         order   @relation(fields: [order_id], references: [order_id], map: "OrderItem_orderId_fkey")
  order_id      String
  product       product @relation(fields: [product_id], references: [product_id], map: "OrderItem_productId_fkey")
  product_id    String
}

// use type instead of model
model delivery {
  delivery_id      String             @id @unique @default(uuid())
  tracking_number  String             @unique
  shipping_address shipping_address[]
}

// model address { // use type for this data as well
//   id      Int     @id @default(autoincrement())
//   userId  String
//   primary Boolean
//   line1   String
//   line2   String
//   city    String
//   state   String
//   country String
// }

model product {
  product_id           String       @id @unique
  english_product_name String
  chinese_product_name String?
  french_product_name  String?
  place_of_origin      String?
  produc_weight        String
  alcohol              Boolean      @default(false)
  price                Int          @default(0)
  image                String
  retail_price         Int          @default(0)
  cost                 Int          @default(0)
  stock                Int          @default(0)
  category             String
  cart_items           cart_items[]
  sold_num             Int          @default(0)
  rating               Float        @default(0)

  order_item     order_item[]
  love_list_item love_list_item[]

  @@index([category], map: "product_FK")
}

model user {
  user_id  String   @id @unique @default(uuid())
  username String   @db.VarChar(100)
  password String   @db.VarChar(30)
  is_admin Boolean  @default(false)
  email    String   @unique(map: "User_email_key")
  birthday DateTime
  phone    String
  image    String?
  address  String?
  postCode String?

  cart         cart          @relation(fields: [cart_id], references: [cart_id], map: "User_cartId_fkey")
  cart_id      Int           @unique
  order        order[]
  group_member group_member?
  group_owner  group_owner?
  love_list_id love_list[]
  wallet       wallet        @relation(fields: [wallet_id], references: [wallet_id], map: "User_walletId_fkey")
  wallet_id    String        @unique

  @@index([email], map: "email")
}

model wallet {
  wallet_id String @id @unique @default(uuid())
  user      user? // user can not be created without creating it's wallet   
  amount    Float
}

// model discount_rate {
//   groupId      String   @id
//   discountRate Decimal? @db.Decimal(10, 0)
//   memberCount  Int?     @default(0)
// }
// dont use model, use enum instead

model love_list {
  love_list_id   Int              @id @default(autoincrement())
  user           user             @relation(fields: [user_id], references: [user_id], map: "LoveList_userId_fkey")
  user_id        String
  love_list_item love_list_item[]
}

model love_list_item {
  love_list_item_id Int       @id @unique
  product           product   @relation(fields: [product_id], references: [product_id])
  product_id        String
  love_list         love_list @relation(fields: [love_list_id], references: [love_list_id])
  love_list_id      Int
}

model shipping_address {
  id                  Int       @id @default(autoincrement())
  userId              String?   @db.VarChar(255)
  firstName           String?   @db.VarChar(255)
  lastName            String?   @db.VarChar(255)
  address1            String?   @db.Text
  address2            String?   @db.Text
  postalCode          String?   @db.VarChar(50)
  city                String?   @db.VarChar(50)
  isPrimaryAddress    Int?      @default(0) @db.TinyInt
  delivery            delivery? @relation(fields: [deliveryDelivery_id], references: [delivery_id])
  deliveryDelivery_id String?

  @@index([userId], map: "userIdfxxxaddress")
}

model usertrail {
  id         Int      @id @default(autoincrement())
  externalId String   @unique(map: "Usertrail_externalId_key")
  attributes Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

enum user_role {
  GROUPMASTER
  GROUPMEMBER
}