generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // id            String     @id @db.VarChar(255) 
  email                String           @id @unique(map: "User_email_key")
  first_name           String?
  last_name            String?
  username             String?          @db.VarChar(100)
  email_verified       DateTime? //is this from Clerk? why do we need this info?
  profile_image        String?
  password             String?
  // role          user_role? //this info is in group_member table
  phone                BigInt?
  birthday             DateTime?
  //FKs
  wallet_id            Wallet?
  ownedGroups          Group[]          @relation("GroupOwner")
  cohostedGroups       Group[]          @relation("GroupCohosts")
  groupCommissions     GroupComission[] @relation("UserGroupCommissions")
  cart                 Cart[]
  order                Order[]
  addresses            Address[]
  help_center_requests HelpCenter[]
}

model Group {
  group_code      String           @id @default(cuid())
  group_name      String
  description     String?          @db.VarChar(1000)
  start_date      DateTime         @default(now())
  duration        Int?             @default(0)
  is_active_      Int?             @default(1) @db.TinyInt
  group_img       String?          @db.VarChar(100)
  tag_1           String?          @db.VarChar(100) //Snack
  tag_2           String?          @db.VarChar(100) //Drink
  final_discount  Float? // final_discount = discount of tag_1 + tag_2 + group size
  //FKs
  owner_email     String
  owner           User             @relation("GroupOwner", fields: [owner_email], references: [email])
  cohosts         User[]           @relation("GroupCohosts")
  orders          Order[]          @relation("GroupOrders")
  groupComissions GroupComission[] @relation("GroupGroupComissions")
}

model GroupComission {
  id               Int    @id @default(autoincrement())
  commissionAmount Float
  //FKs
  user_email       String
  user             User   @relation("UserGroupCommissions", fields: [user_email], references: [email])
  group_code       String
  group            Group  @relation("GroupGroupComissions", fields: [group_code], references: [group_code])
}

model Cart {
  id         Int       @id @default(autoincrement())
  quantity   Int
  //FKs
  user       User      @relation(fields: [user_email], references: [email]) //user email
  user_email String
  products   Product[]
}

model Order {
  id               Int       @id @default(autoincrement())
  orderDate        DateTime? @default(now())
  total            Int?      @default(0)
  sub_total        Int?      @default(0)
  sales_tax        Float?    @db.Float
  delivery         Float?    @db.Float
  green_fee        Float?    @db.Float
  delivery_tip     Float?    @db.Float
  payment_intent   String?   @db.VarChar(255) //what is this? Paypal, Apple Pay? 
  shipping_address String?   @db.Text //API feth this address from Address table using user_email
  refund_amount    Decimal?  @db.Decimal(10, 2)
  //FKs
  group_code       String
  group            Group     @relation("GroupOrders", fields: [group_code], references: [group_code])
  user_email       String
  user             User      @relation(fields: [user_email], references: [email])
  products         Product[]
}

model HelpCenter {
  phone       Int     @id
  description String? @db.VarChar(45)
  //FKs
  user_email  String
  user        User    @relation(fields: [user_email], references: [email]) //user email
  files       Files[]
}

model Files {
  id             Int        @id @default(autoincrement())
  file_url       String
  file_name      String
  //FKs
  help_center_id Int
  help_center    HelpCenter @relation(fields: [help_center_id], references: [phone])
}

model Address {
  id          Int     @id @default(autoincrement())
  is_primary_ Boolean
  email       String
  line1       String
  line2       String?
  city        String
  state       String
  country     String
  first_name  String
  last_name   String
  postal_code String
  //FKs
  user_email  String
  user        User    @relation(fields: [user_email], references: [email])
}

model Product {
  skuid                String    @id @default(cuid())
  english_product_name String
  chinese_product_name String?
  french_product_name  String?
  place_of_origin      String?
  product_weight       String
  description          String?
  alcohol              Boolean   @default(false)
  price                Int       @default(0)
  retail_price         Int       @default(0)
  cost_price           Int       @default(0)
  stock                Int       @default(0)
  alcohol_percentage   Int       @default(0)
  specification        String?
  nutrition_fact       String?
  //FKS
  category_id          Int?
  category             Category? @relation(fields: [category_id], references: [id])
  carts                Cart[]
  orders               Order[]
  pictures             Picture[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  //FK
  products    Product[]
}

model Wallet {
  id         Int    @id @default(autoincrement())
  amount     Float? @default(0)
  //FKs
  user_email String @unique
  user       User   @relation(fields: [user_email], references: [email])
}

// model discount_rate {
//   group_id      String   @id
//   discount_rate Decimal? @db.Decimal(10, 0)
//   member_count  Int?     @default(0)
// }

model LoveList {
  id      Int    @id @default(autoincrement())
  user_id String @db.VarChar(255)
  sku_id  String

  @@unique([user_id, sku_id])
}

model ShippingAddress {
  id                  Int     @id @default(autoincrement())
  user_id             String? @db.VarChar(255)
  address             String? @db.Text
  postal_code         String? @db.VarChar(50)
  city                String? @db.VarChar(50)
  is_primary_address_ Int?    @default(0) @db.TinyInt

  @@index([user_id], map: "userIdfxxxaddress")
}

model UserTrail {
  id         Int      @id @default(autoincrement())
  externalId String   @unique(map: "Usertrail_externalId_key")
  attributes Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model Picture {
  id           Int      @id @default(autoincrement())
  height       Int?
  width        Int?
  url          String
  productSkuid String?
  product      Product? @relation(fields: [productSkuid], references: [skuid], map: "Picture_productSkuid_fkey")
}

// enum UserRole {
//   GROUPMASTER
//   GROUPMEMBER
// }
