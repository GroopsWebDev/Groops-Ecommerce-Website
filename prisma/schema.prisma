generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model account {
//   id                String  @id @default("0") @db.VarChar(50)
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              user    @relation(fields: [userId], references: [user_id], onDelete: Cascade, map: "Account_userId_fkey")

//   @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
//   @@index([userId], map: "Account_userId_fkey")
// }

model cart {
  cart_id    Int          @id @unique
  // productId String? @db.VarChar(100)
  // qty       String? @db.VarChar(100)
  cart_items cart_items[]
  user       user?
}

model cart_items {
  cart_items_id Int @id

  qty   String? @db.VarChar(100)
  price String  @db.VarChar(100)

  cart       cart    @relation(fields: [cart_id], references: [cart_id], map: "CartItems_cartId_fkey")
  cart_id    Int
  product    product @relation(fields: [product_id], references: [product_id], map: "Product_productId_fkey")
  product_id String
}

model group {
  group_id         Int          @id @unique @default(autoincrement())
  group_owner_id   String
  group_name       String
  description      String?      @db.VarChar(255)
  group_img        String?      @db.VarChar(100)
  group_code       String       @unique @default(uuid())
  group_link       String
  startDate        DateTime     @default(now())
  endDate          DateTime
  is_active        group_status @default(CLOSED)
  final_discount   Float?
  owner_commission Float?       @default(0)

  group_member group_member[]
  group_owner  group_owner[]
  order        order[]
  group_image  group_image[]
}

model group_member {
  group_member_id String @id @unique @default(uuid())
  user            user   @relation(fields: [user_id], references: [user_id], map: "GroupMember_userId_fkey")
  user_id         String @unique
  group           group  @relation(fields: [group_id], references: [group_id], map: "GroupMember_groupId_fkey")
  group_id        Int
}

model group_owner {
  group_owner_id  String   @id @unique @default(uuid())
  start_date      DateTime
  end_date        DateTime
  discount_amount Float

  user     user   @relation(fields: [user_id], references: [user_id], map: "GroupOwner_userId_fkey")
  user_id  String @unique
  group    group  @relation(fields: [group_id], references: [group_id], map: "GroupOwner_groupId_fkey")
  group_id Int
}

model coOwner {
  id           Int    @id @unique @default(autoincrement())
  groupCoName  String
  groupCoEmail String @db.VarChar(45)
  group_id     Int
}

model group_image {
  id       Int    @id @unique @default(autoincrement())
  url      String
  group_id Int
  group    group  @relation(fields: [group_id], references: [group_id], map: "GroupPicture_groupId_fkey")
}

model help_center {
  phone       Int     @id
  email       String  @db.VarChar(45)
  description String? @db.VarChar(45)
  files       String? @db.VarChar(45)
}

model order {
  order_id        String       @id @unique @default(uuid())
  order_date      DateTime?    @default(now())
  subTotal        Int?         @default(0)
  total           Int?         @default(0)
  salesTax        Float?       @db.Float
  delivery        Float?       @db.Float
  greenFee        Float?       @db.Float
  tipDelivery     Float?       @db.Float
  is_delivery     Boolean?     @default(false)
  paymentIntent   String?
  shippingAddress String?      @db.Text
  refund_amount   Decimal?     @db.Decimal(10, 2)
  user            user         @relation(fields: [user_id], references: [user_id], map: "Order_userId_fkey")
  user_id         String
  group           group        @relation(fields: [group_id], references: [group_id], map: "Order_groupId_fkey")
  group_id        Int
  order_item      order_item[]
}

model order_item {
  order_item_id String  @id @unique @default(uuid())
  order         order   @relation(fields: [order_id], references: [order_id], map: "OrderItem_orderId_fkey")
  order_id      String
  product       product @relation(fields: [product_id], references: [product_id], map: "OrderItem_productId_fkey")
  product_id    String
}

// model payment {
//   payment_id String @id @unique @default(uuid())
//   amount     Int
//   currency   String
//   status     String
//   order      order  @relation(fields: [order_id], references: [order_id], map: "Payment_orderId_fkey")
//   order_id   String
// }
model delivery {
  delivery_id      String             @id @unique @default(uuid())
  tracking_number  String             @unique
  shipping_address shipping_address[]
}

model address {
  id         Int     @id @default(autoincrement())
  userId     String
  primary    Boolean
  line1      String
  line2      String?
  city       String
  state      String
  country    String
  firstName  String
  lastName   String
  postalCode String
}

model product {
  product_id           String  @id @unique
  english_product_name String
  chinese_product_name String?
  french_product_name  String?
  place_of_origin      String?
  product_weight       String
  alcohol              Boolean @default(false)
  alcohol_percentage   String?
  specification        String?
  diatary_preference   String?
  price                Int     @default(0)
  retail_price         Int     @default(0)
  cost                 Int     @default(0)
  stock                Int     @default(0)
  sold_num             Int     @default(0)
  rating               Float   @default(0)

  category               category               @relation(fields: [category_id], references: [category], map: "product_FK")
  category_id            String
  cart_items             cart_items[]
  order_item             order_item[]
  love_list_item         love_list_item[]
  productImage           productImage[]
  nuetritionFact         nuetritionFact         @relation(fields: [nuetritionFactId], references: [id])
  nuetritionFactId       Int                    @unique
  subcategory            subcategory?           @relation(fields: [subcategorySubcategory], references: [subcategory])
  subcategorySubcategory String?
  subcategoried_product  subcategoried_product?
}

model productImage {
  id         Int     @id @unique @default(autoincrement())
  height     Int?
  width      Int?
  url        String
  product_id String
  product    product @relation(fields: [product_id], references: [product_id], map: "Picture_productSkuid_fkey")

  @@index([product_id], map: "Picture_productSkuid_fkey")
}

model category {
  category    String        @id
  subcategory subcategory[]
  product     product[]
}

model subcategory {
  subcategory           String                  @id
  category              category                @relation(fields: [category_id], references: [category], map: "Subcategory_category_fkey")
  category_id           String
  product               product[]
  subcategoried_Product subcategoried_product[]
}

model subcategoried_product {
  subcategory    subcategory @relation(fields: [subcategory_id], references: [subcategory])
  subcategory_id String      @unique
  product        product     @relation(fields: [product_id], references: [product_id])
  product_id     String      @unique
}

model user {
  user_id  String   @id @unique @default(uuid())
  username String   @db.VarChar(100)
  password String   @db.VarChar(30)
  is_admin Boolean  @default(false)
  email    String   @unique(map: "User_email_key")
  birthday DateTime
  phone    String
  image    String?
  address  String?
  postCode String?

  cart         cart          @relation(fields: [cart_id], references: [cart_id], map: "User_cartId_fkey")
  cart_id      Int           @unique
  order        order[]
  group_member group_member?
  group_owner  group_owner?
  love_list_id love_list[]
  wallet       wallet        @relation(fields: [wallet_id], references: [wallet_id], map: "User_walletId_fkey")
  wallet_id    String        @unique

  @@index([email], map: "email")
}

model wallet {
  id     Int    @id @default(autoincrement())
  userId String @unique @db.VarChar(255)
  amount Float
}

model discount_rate {
  groupId      String   @id
  discountRate Decimal? @db.Decimal(10, 0)
  memberCount  Int?     @default(0)
}

model group_member {
  userId  String
  groupId String
  id      Int    @id @default(autoincrement())
  group   group  @relation(fields: [groupId], references: [groupId], map: "GroupMember_groupId_fkey")

  @@index([groupId], map: "GroupMember_groupId_fkey")
  @@index([userId], map: "groupmember_FK")
}

model love_list {
  id     Int    @id @default(autoincrement())
  userId String @db.VarChar(255)
  skuid  String

  @@unique([userId, skuid])
}

model shipping_address {
  id                  Int       @id @default(autoincrement())
  userId              String?   @db.VarChar(255)
  firstName           String?   @db.VarChar(255)
  lastName            String?   @db.VarChar(255)
  address1            String?   @db.Text
  address2            String?   @db.Text
  postalCode          String?   @db.VarChar(50)
  city                String?   @db.VarChar(50)
  isPrimaryAddress    Int?      @default(0) @db.TinyInt
  delivery            delivery? @relation(fields: [deliveryDelivery_id], references: [delivery_id])
  deliveryDelivery_id String?

  @@index([userId], map: "userIdfxxxaddress")
}

model usertrail {
  id         Int      @id @default(autoincrement())
  externalId String   @unique(map: "Usertrail_externalId_key")
  attributes Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model nuetritionFact {
  id      Int      @id @default(autoincrement())
  url     String
  product product?
}

enum user_role {
  GROUPMASTER
  GROUPMEMBER
}

enum group_status {
  OPEN
  CLOSED
}

// enum snacks {
//   Chips
//   Cookies
//   Cake
//   Pre_Packaged
//   Sea_Sedge
// }

// enum Candies {
//   Jelly_Gum
//   Sweets
//   Chocolate
// }

// enum Instant_Food {
//   Canned_Food
//   InstantCoffee_Tea
//   Instant_Noodles
//   Self_Heated
//   Pre_Pacakged_Hot_Pot_Base
// }

// enum Personal_Care {
//   Bath_Body
//   Body_Care
//   Oral_Care
//   Hand_Care
//   Healthcare
//   Femenine_Care
//   Hair_Care
//   Facial_Care
// }

// enum Beauty {
//   Skin_Care
//   Sun_Care
//   Eye_Makeup
//   Cheek
// }

// enum Home_Life {
//   Office_Supplies
//   Home_Decoration
// }
